name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  generic-build:
    name: Check building step
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install dependencies and run tests
        run: mvn clean install

  jacoco:
    name: Generate JaCoCo test reports
    runs-on: ubuntu-latest
    needs: generic-build
    if: ${{ needs.generic-build.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Generate JaCoCo reports
        run: mvn verify

      - name: Upload JaCoCo report for ${{ matrix.module }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            **/target/site/jacoco

  health-checks:
    name: Checking if only gateway is exposed
    runs-on: ubuntu-latest
    needs: generic-build
    if: ${{ needs.generic-build.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install dependencies and run tests
        run: mvn clean install

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker images
        run: |
          docker build -t gateway:latest gateway
          docker build -t cart:latest cart
          docker build -t checkout:latest checkout

      - name: Start services
        run: docker-compose up -d

      - name: Check gateway health endpoint
        run: |
          sleep 30
          curl --fail http://localhost:8080/actuator/health

      - name: Check cart health endpoint
        run: |
          sleep 30
          if curl --fail http://localhost:8081/actuator/health; then
            echo "App must only be available thru gateway"
            exit 1
          else
            echo "Connection refused as expected"
          fi

      - name: Check checkout health endpoint
        run: |
          sleep 30
          if curl --fail http://localhost:8082/actuator/health; then
            echo "App must only be available thru gateway"
            exit 1
          else
            echo "Connection refused as expected"
          fi
  endpoints-check:
    name: Checking cart/checkout/products endpoints
    runs-on: ubuntu-latest
    needs: generic-build
    if: ${{ needs.generic-build.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install dependencies and run tests
        run: mvn clean install

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker images
        run: |
          docker build -t gateway:latest gateway
          docker build -t cart:latest cart
          docker build -t checkout:latest checkout

      - name: Start services
        run: docker-compose up -d

      - name: Test POST /cart/items endpoint
        continue-on-error: true
        run: |
          sleep 30
          curl -X POST http://localhost:8080/cart/items \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "153e23c8-322e-4fec-b9c4-72b8f74ad002",
                  "itemId": "1",
                  "quantity": "2"
                }' \
            --fail

      - name: Test POST /cart/items with invalid consumerId
        continue-on-error: true
        run: |
          curl -X POST http://localhost:8080/cart/items \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "invalid-uuid",
                  "itemId": "1",
                  "quantity": "2"
                }' \
            --fail

      - name: Test POST /cart/items with invalid itemId
        continue-on-error: true
        run: |
          curl -X POST http://localhost:8080/cart/items \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "153e23c8-322e-4fec-b9c4-72b8f74ad002",
                  "itemId": "invalid-item",
                  "quantity": "2"
                }' \
            --fail

      - name: Test POST /cart/items with invalid quantity
        continue-on-error: true
        run: |
          curl -X POST http://localhost:8080/cart/items \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "153e23c8-322e-4fec-b9c4-72b8f74ad002",
                  "itemId": "1",
                  "quantity": "-1"
                }' \
            --fail

      - name: Test DELETE /cart/item endpoint
        continue-on-error: true
        run: |
          curl -X DELETE http://localhost:8080/cart/item \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "153e23c8-322e-4fec-b9c4-72b8f74ad002",
                  "itemId": "1"
                }' \
            --fail

      - name: Test DELETE /cart/item with invalid consumerId
        continue-on-error: true
        run: |
          curl -X DELETE http://localhost:8080/cart/item \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "invalid-uuid",
                  "itemId": "1"
                }' \
            --fail

      - name: Test UPDATE /cart/item endpoint
        continue-on-error: true
        run: |
          curl -X PUT http://localhost:8080/cart/item \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "153e23c8-322e-4fec-b9c4-72b8f74ad002",
                  "itemId": "1"
                }' \
            --fail

      - name: Test UPDATE /cart/item with invalid consumerId
        continue-on-error: true
        run: |
          curl -X PUT http://localhost:8080/cart/item \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "invalid-uuid",
                  "itemId": "1"
                }' \
            --fail

      - name: Test UPDATE /cart/item with invalid itemId
        continue-on-error: true
        run: |
          curl -X PUT http://localhost:8080/cart/item \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "153e23c8-322e-4fec-b9c4-72b8f74ad002",
                  "itemId": "invalid-item"
                }' \
            --fail

      - name: Test DELETE /cart endpoint
        continue-on-error: true
        run: |
          curl -X DELETE http://localhost:8080/cart \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "153e23c8-322e-4fec-b9c4-72b8f74ad002"
                }' \
            --fail

      - name: Test DELETE /cart with invalid consumerId
        continue-on-error: true
        run: |
          curl -X DELETE http://localhost:8080/cart \
            -H "Content-Type: application/json" \
            -d '{
                  "consumerId": "invalid-uuid"
                }' \
            --fail